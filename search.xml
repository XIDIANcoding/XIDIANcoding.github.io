<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java内存模型]]></title>
    <url>%2F2016%2F10%2F06%2Fjava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[Java把内存划分成两种：一种是栈内存，一种是堆内存。 堆主要用来存放对象的，栈主要是用来执行程序的. ​ 在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。 ​ 当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。 ​ 堆内存用来存放由new创建的对象和数组。 ​ 在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。 ​ 在堆中产生了一个数组或对象后，还可以在栈中定义一个特殊的变量，让栈中这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量。引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。 ​ 数组和对象在没有引用变量指向它的时候，才变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉。这个也是java比较占内存的主要原因，实际上，栈中的变量指向堆内存中的变量，这就是 Java 中的指针! ​ 引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。 参考链接]]></content>
      <categories>
        <category>编程技能</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java对象和对象引用]]></title>
    <url>%2F2016%2F10%2F04%2Fjava%E5%AF%B9%E5%83%8F%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%2F</url>
    <content type="text"><![CDATA[123456//首先我们创建一个类用以后面的说明class Vehicle&#123; int passengers; int fuelcap; int mpg;&#125; 使用上面的模板类创建对象： Vehicle vehl=new Vehicle(); 语句的动作称之为创建一个对象，其实，它包含了四个动作: 右边的“new Vehicle”，是以Vehicle类为模板，在堆空间里创建一个Vehicle类对象（也简称为Vehicle对象）。 末尾的()意味着，在对象创建后，立即调用Vehicle类的构造函数，对刚生成的对象进行初始化。构造函数是肯定有的。如果你没写，Java会给你补上一个默认的构造函数。 左边的“Vehicle veh1”创建了一个Vehicle类引用变量。所谓Vehicle类引用，就是以后可以用来指向Vehicle对象的对象引用。 “=”操作符使对象引用指向刚创建的那个Vehicle对象。 我们可以把这条语句拆成两部分： Vehicle veh1; veh1 = new Vehicle(); 这样写，就比较清楚了，有两个实体：一是对象引用变量，一是对象本身。 在堆空间里创建的实体，与在数据段以及栈空间里创建的实体不同。尽管它们也是确确实实存在的实体，但是，我们看不见，也摸不着。不仅如此，我们仔细研究一下第二句，找找刚创建的对象叫什么名字？有人说，它叫“Vehicle”。不对，“Vehicle”是类（对象的创建模板）的名字。一个Vehicle类可以据此创建出无数个对象，这些对象不可能全叫“Vehicle”。 对象连名都没有，没法直接访问它。我们只能通过对象引用来间接访问对象。 参考]]></content>
      <categories>
        <category>编程技能</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
